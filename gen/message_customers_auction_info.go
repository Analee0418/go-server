// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     lueey.avsc
 */
package avro

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)

  
type MessageCustomersAuctionInfo struct {

	
	
		Auction_list *MapDouble
	

	
	
		Discount_list *MapDouble
	

}

func NewMessageCustomersAuctionInfo() (*MessageCustomersAuctionInfo) {
	return &MessageCustomersAuctionInfo{}
}

func DeserializeMessageCustomersAuctionInfo(r io.Reader) (*MessageCustomersAuctionInfo, error) {
	t := NewMessageCustomersAuctionInfo()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func DeserializeMessageCustomersAuctionInfoFromSchema(r io.Reader, schema string) (*MessageCustomersAuctionInfo, error) {
	t := NewMessageCustomersAuctionInfo()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func writeMessageCustomersAuctionInfo(r *MessageCustomersAuctionInfo, w io.Writer) error {
	var err error
	
	err = writeMapDouble( r.Auction_list, w)
	if err != nil {
		return err			
	}
	
	err = writeMapDouble( r.Discount_list, w)
	if err != nil {
		return err			
	}
	
	return err
}

func (r *MessageCustomersAuctionInfo) Serialize(w io.Writer) error {
	return writeMessageCustomersAuctionInfo(r, w)
}

func (r *MessageCustomersAuctionInfo) Schema() string {
	return "{\"fields\":[{\"name\":\"auction_list\",\"type\":{\"type\":\"map\",\"values\":\"double\"}},{\"name\":\"discount_list\",\"type\":{\"type\":\"map\",\"values\":\"double\"}}],\"name\":\"proto.MessageCustomersAuctionInfo\",\"type\":\"record\"}"
}

func (r *MessageCustomersAuctionInfo) SchemaName() string {
	return "proto.MessageCustomersAuctionInfo"
}

func (_ *MessageCustomersAuctionInfo) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *MessageCustomersAuctionInfo) SetInt(v int32) { panic("Unsupported operation") }
func (_ *MessageCustomersAuctionInfo) SetLong(v int64) { panic("Unsupported operation") }
func (_ *MessageCustomersAuctionInfo) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *MessageCustomersAuctionInfo) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *MessageCustomersAuctionInfo) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *MessageCustomersAuctionInfo) SetString(v string) { panic("Unsupported operation") }
func (_ *MessageCustomersAuctionInfo) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MessageCustomersAuctionInfo) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
			r.Auction_list = NewMapDouble()
	
		
		
			return r.Auction_list
		
	
	case 1:
		
			r.Discount_list = NewMapDouble()
	
		
		
			return r.Discount_list
		
	
	}
	panic("Unknown field index")
}

func (r *MessageCustomersAuctionInfo) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
	}
	panic("Unknown field index")
}

func (_ *MessageCustomersAuctionInfo) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *MessageCustomersAuctionInfo) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *MessageCustomersAuctionInfo) Finalize() { }
