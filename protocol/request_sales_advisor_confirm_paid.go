// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     lueey.avsc
 */
package protocol

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)

  
type RequestSalesAdvisorConfirmPaid struct {

	
	
		Brand *BrandUnion
	

	
	
		Color *ColorUnion
	

	
	
		Interior *InteriorUnion
	

	
	
		Series *SeriesUnion
	

	
	
		Price float32
	

	
	
		DisPrice float32
	

}

func NewRequestSalesAdvisorConfirmPaid() (*RequestSalesAdvisorConfirmPaid) {
	return &RequestSalesAdvisorConfirmPaid{}
}

func DeserializeRequestSalesAdvisorConfirmPaid(r io.Reader) (*RequestSalesAdvisorConfirmPaid, error) {
	t := NewRequestSalesAdvisorConfirmPaid()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func DeserializeRequestSalesAdvisorConfirmPaidFromSchema(r io.Reader, schema string) (*RequestSalesAdvisorConfirmPaid, error) {
	t := NewRequestSalesAdvisorConfirmPaid()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func writeRequestSalesAdvisorConfirmPaid(r *RequestSalesAdvisorConfirmPaid, w io.Writer) error {
	var err error
	
	err = writeBrandUnion( r.Brand, w)
	if err != nil {
		return err			
	}
	
	err = writeColorUnion( r.Color, w)
	if err != nil {
		return err			
	}
	
	err = writeInteriorUnion( r.Interior, w)
	if err != nil {
		return err			
	}
	
	err = writeSeriesUnion( r.Series, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteFloat( r.Price, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteFloat( r.DisPrice, w)
	if err != nil {
		return err			
	}
	
	return err
}

func (r *RequestSalesAdvisorConfirmPaid) Serialize(w io.Writer) error {
	return writeRequestSalesAdvisorConfirmPaid(r, w)
}

func (r *RequestSalesAdvisorConfirmPaid) Schema() string {
	return "{\"fields\":[{\"name\":\"brand\",\"type\":[\"null\",\"string\"]},{\"name\":\"color\",\"type\":[\"null\",\"string\"]},{\"name\":\"interior\",\"type\":[\"null\",\"string\"]},{\"name\":\"series\",\"type\":[\"null\",\"string\"]},{\"name\":\"price\",\"type\":\"float\"},{\"name\":\"disPrice\",\"type\":\"float\"}],\"name\":\"proto.RequestSalesAdvisorConfirmPaid\",\"type\":\"record\"}"
}

func (r *RequestSalesAdvisorConfirmPaid) SchemaName() string {
	return "proto.RequestSalesAdvisorConfirmPaid"
}

func (_ *RequestSalesAdvisorConfirmPaid) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *RequestSalesAdvisorConfirmPaid) SetInt(v int32) { panic("Unsupported operation") }
func (_ *RequestSalesAdvisorConfirmPaid) SetLong(v int64) { panic("Unsupported operation") }
func (_ *RequestSalesAdvisorConfirmPaid) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *RequestSalesAdvisorConfirmPaid) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *RequestSalesAdvisorConfirmPaid) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *RequestSalesAdvisorConfirmPaid) SetString(v string) { panic("Unsupported operation") }
func (_ *RequestSalesAdvisorConfirmPaid) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *RequestSalesAdvisorConfirmPaid) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
			r.Brand = NewBrandUnion()
	
		
		
			return r.Brand
		
	
	case 1:
		
			r.Color = NewColorUnion()
	
		
		
			return r.Color
		
	
	case 2:
		
			r.Interior = NewInteriorUnion()
	
		
		
			return r.Interior
		
	
	case 3:
		
			r.Series = NewSeriesUnion()
	
		
		
			return r.Series
		
	
	case 4:
		
		
			return (*types.Float)(&r.Price)
		
	
	case 5:
		
		
			return (*types.Float)(&r.DisPrice)
		
	
	}
	panic("Unknown field index")
}

func (r *RequestSalesAdvisorConfirmPaid) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
        
	
        
	
        
	
        
	
	}
	panic("Unknown field index")
}

func (_ *RequestSalesAdvisorConfirmPaid) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *RequestSalesAdvisorConfirmPaid) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *RequestSalesAdvisorConfirmPaid) Finalize() { }
