// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     lueey.avsc
 */
package protocol

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)

  
type MessageAuctionGoods struct {

	
	
		Goods_id int32
	

	
	
		Goods_name *Goods_nameUnion
	

	
	
		Original_price float32
	

	
	
		Final_price float32
	

	
	
		Limit_price float32
	

	
	
		Users_num int32
	

	
	
		Final_record *Final_recordUnion
	

	
	
		Auction_records []*MessageAuctionRecord
	

}

func NewMessageAuctionGoods() (*MessageAuctionGoods) {
	return &MessageAuctionGoods{}
}

func DeserializeMessageAuctionGoods(r io.Reader) (*MessageAuctionGoods, error) {
	t := NewMessageAuctionGoods()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func DeserializeMessageAuctionGoodsFromSchema(r io.Reader, schema string) (*MessageAuctionGoods, error) {
	t := NewMessageAuctionGoods()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func writeMessageAuctionGoods(r *MessageAuctionGoods, w io.Writer) error {
	var err error
	
	err = vm.WriteInt( r.Goods_id, w)
	if err != nil {
		return err			
	}
	
	err = writeGoods_nameUnion( r.Goods_name, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteFloat( r.Original_price, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteFloat( r.Final_price, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteFloat( r.Limit_price, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteInt( r.Users_num, w)
	if err != nil {
		return err			
	}
	
	err = writeFinal_recordUnion( r.Final_record, w)
	if err != nil {
		return err			
	}
	
	err = writeArrayMessageAuctionRecord( r.Auction_records, w)
	if err != nil {
		return err			
	}
	
	return err
}

func (r *MessageAuctionGoods) Serialize(w io.Writer) error {
	return writeMessageAuctionGoods(r, w)
}

func (r *MessageAuctionGoods) Schema() string {
	return "{\"fields\":[{\"name\":\"goods_id\",\"type\":\"int\"},{\"name\":\"goods_name\",\"type\":[\"null\",\"string\"]},{\"name\":\"original_price\",\"type\":\"float\"},{\"name\":\"final_price\",\"type\":\"float\"},{\"name\":\"limit_price\",\"type\":\"float\"},{\"name\":\"users_num\",\"type\":\"int\"},{\"name\":\"final_record\",\"type\":[\"null\",{\"fields\":[{\"name\":\"goods_id\",\"type\":\"int\"},{\"name\":\"customer_mobile\",\"type\":[\"null\",\"string\"]},{\"name\":\"customer_mobile_region\",\"type\":[\"null\",\"string\"]},{\"name\":\"customer_idcard\",\"type\":[\"null\",\"string\"]},{\"name\":\"customer_username\",\"type\":[\"null\",\"string\"]},{\"name\":\"bid_price\",\"type\":\"float\"},{\"name\":\"timestamp\",\"type\":\"long\"}],\"name\":\"MessageAuctionRecord\",\"namespace\":\"proto\",\"type\":\"record\"}]},{\"name\":\"auction_records\",\"type\":{\"items\":\"proto.MessageAuctionRecord\",\"type\":\"array\"}}],\"name\":\"proto.MessageAuctionGoods\",\"type\":\"record\"}"
}

func (r *MessageAuctionGoods) SchemaName() string {
	return "proto.MessageAuctionGoods"
}

func (_ *MessageAuctionGoods) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *MessageAuctionGoods) SetInt(v int32) { panic("Unsupported operation") }
func (_ *MessageAuctionGoods) SetLong(v int64) { panic("Unsupported operation") }
func (_ *MessageAuctionGoods) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *MessageAuctionGoods) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *MessageAuctionGoods) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *MessageAuctionGoods) SetString(v string) { panic("Unsupported operation") }
func (_ *MessageAuctionGoods) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MessageAuctionGoods) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
		
			return (*types.Int)(&r.Goods_id)
		
	
	case 1:
		
			r.Goods_name = NewGoods_nameUnion()
	
		
		
			return r.Goods_name
		
	
	case 2:
		
		
			return (*types.Float)(&r.Original_price)
		
	
	case 3:
		
		
			return (*types.Float)(&r.Final_price)
		
	
	case 4:
		
		
			return (*types.Float)(&r.Limit_price)
		
	
	case 5:
		
		
			return (*types.Int)(&r.Users_num)
		
	
	case 6:
		
			r.Final_record = NewFinal_recordUnion()
	
		
		
			return r.Final_record
		
	
	case 7:
		
			r.Auction_records = make([]*MessageAuctionRecord, 0)
	
		
		
			return (*ArrayMessageAuctionRecordWrapper)(&r.Auction_records)
		
	
	}
	panic("Unknown field index")
}

func (r *MessageAuctionGoods) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
	}
	panic("Unknown field index")
}

func (_ *MessageAuctionGoods) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *MessageAuctionGoods) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *MessageAuctionGoods) Finalize() { }
